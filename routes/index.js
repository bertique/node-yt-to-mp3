// Generated by CoffeeScript 1.6.3
(function() {
  var exec, fs, musiccache, request, spawn, _ref;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  request = require('request');

  fs = require('fs');

  musiccache = "music_cache/";

  exports.index = function(req, res) {
    return res.render('index', {
      title: 'Express'
    });
  };

  exports.youtube_mp3 = function(req, res) {
    var readStream, stat, youtube_dl_url_child;
    res.setHeader('Content-Type', 'audio/x-mpeg');
    if (req.headers.range) {
      console.log("Found range header");
      res.statusCode = 206;
    }
    if (fs.existsSync(musiccache + ("" + req.params.youtube_video_id + ".mp3"))) {
      readStream = fs.createReadStream(musiccache + ("" + req.params.youtube_video_id + ".mp3"));
      stat = fs.statSync(musiccache + ("" + req.params.youtube_video_id + ".mp3"));
      res.setHeader('Content-Length', stat.size);
      return readStream.pipe(res);
    } else {
      return youtube_dl_url_child = exec("python youtube-dl.py --no-check-certificate --simulate --get-url http://www.youtube.com/watch?v=" + req.params.youtube_video_id, function(err, stdout, stderr) {
        var ffmpeg_child, writable, youtube_dl_url;
        youtube_dl_url = stdout.toString();
        youtube_dl_url = youtube_dl_url.substring(0, youtube_dl_url.length - 1);
        ffmpeg_child = spawn("ffmpeg", ['-i', 'pipe:0', '-acodec', 'libmp3lame', '-f', 'mp3', '-']);
        ffmpeg_child.stdout.pipe(res);
        writable = fs.createWriteStream(musiccache + ("" + req.params.youtube_video_id + ".mp3"));
        ffmpeg_child.stdout.pipe(writable);
        return request({
          url: youtube_dl_url,
          headers: {
            'Youtubedl-no-compression': 'True'
          }
        }).pipe(ffmpeg_child.stdin);
      });
    }
  };

}).call(this);
